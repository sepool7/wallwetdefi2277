export type LogMessage = {
    level: string;
    prefix: string;
    message: any[];
    timestamp: number;
};
export type LogWriter = {
    add: (message: LogMessage) => void;
};
export declare class Log {
    prefix: string;
    enabled: boolean;
    css: string;
    messages: LogMessage[];
    logWriter: LogWriter | undefined;
    constructor(prefix: string, enabled: boolean, logWriter?: LogWriter);
    addMessage({ level, prefix, timestamp }: {
        level: string;
        prefix: string;
        timestamp?: number;
    }, ...args: any[]): void;
    setWriter(logWriter: any): void;
    log(...args: any[]): void;
    error(...args: any[]): void;
    warn(...args: any[]): void;
    debug(...args: any[]): void;
}
export declare const initLog: (prefix: string, enabled?: boolean, logWriter?: LogWriter) => Log;
export declare const setLogWriter: (logWriterFactory: () => LogWriter | undefined) => void;
export declare const enableLog: (enabled?: boolean) => void;
export declare const enableLogByPrefix: (prefix: string, enabled: boolean) => void;
export declare const getLog: () => LogMessage[];
//# sourceMappingURL=debug.d.ts.map