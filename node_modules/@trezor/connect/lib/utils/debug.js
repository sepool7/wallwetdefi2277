"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLog = exports.enableLogByPrefix = exports.enableLog = exports.setLogWriter = exports.initLog = exports.Log = void 0;
const green = '#bada55';
const blue = '#20abd8';
const orange = '#f4a744';
const yellow = '#fbd948';
const colors = {
    '@trezor/connect': `color: ${blue}; background: #000;`,
    '@trezor/connect-web': `color: ${blue}; background: #000;`,
    '@trezor/connect-webextension': `color: ${blue}; background: #000;`,
    IFrame: `color: ${orange}; background: #000;`,
    Core: `color: ${orange}; background: #000;`,
    DeviceList: `color: ${green}; background: #000;`,
    Device: `color: ${green}; background: #000;`,
    DeviceCommands: `color: ${green}; background: #000;`,
    '@trezor/transport': `color: ${green}; background: #000;`,
    InteractionTimeout: `color: ${green}; background: #000;`,
    '@trezor/connect-popup': `color: ${yellow}; background: #000;`,
};
const MAX_ENTRIES = 100;
class Log {
    constructor(prefix, enabled, logWriter) {
        this.prefix = prefix;
        this.enabled = enabled;
        this.messages = [];
        this.css = typeof window !== 'undefined' && colors[prefix] ? colors[prefix] : '';
        if (logWriter) {
            this.logWriter = logWriter;
        }
    }
    addMessage({ level, prefix, timestamp }, ...args) {
        const message = {
            level,
            prefix,
            css: this.css,
            message: args,
            timestamp: timestamp || Date.now(),
        };
        this.messages.push(message);
        if (this.logWriter) {
            try {
                this.logWriter.add(message);
            }
            catch (err) {
                console.error('There was an error adding log message', err, message);
            }
        }
        if (this.messages.length > MAX_ENTRIES) {
            this.messages.shift();
        }
    }
    setWriter(logWriter) {
        this.logWriter = logWriter;
    }
    log(...args) {
        this.addMessage({ level: 'log', prefix: this.prefix }, ...args);
        if (this.enabled) {
            console.log(`%c${this.prefix}`, this.css, ...args);
        }
    }
    error(...args) {
        this.addMessage({ level: 'error', prefix: this.prefix }, ...args);
        if (this.enabled) {
            console.error(`%c${this.prefix}`, this.css, ...args);
        }
    }
    warn(...args) {
        this.addMessage({ level: 'warn', prefix: this.prefix }, ...args);
        if (this.enabled) {
            console.warn(`%c${this.prefix}`, this.css, ...args);
        }
    }
    debug(...args) {
        this.addMessage({ level: 'debug', prefix: this.prefix }, ...args);
        if (this.enabled) {
            if (this.css) {
                console.log(`%c${this.prefix}`, this.css, ...args);
            }
            else {
                console.log(this.prefix, ...args);
            }
        }
    }
}
exports.Log = Log;
const _logs = {};
let writer;
const initLog = (prefix, enabled, logWriter) => {
    const instanceWriter = logWriter || writer;
    const instance = new Log(prefix, !!enabled, instanceWriter);
    _logs[prefix] = instance;
    return instance;
};
exports.initLog = initLog;
const setLogWriter = (logWriterFactory) => {
    Object.keys(_logs).forEach(key => {
        writer = logWriterFactory();
        if (writer) {
            _logs[key].setWriter(writer);
            const { messages } = _logs[key];
            messages.forEach(message => {
                writer === null || writer === void 0 ? void 0 : writer.add(message);
            });
        }
    });
};
exports.setLogWriter = setLogWriter;
const enableLog = (enabled) => {
    Object.keys(_logs).forEach(key => {
        _logs[key].enabled = !!enabled;
    });
};
exports.enableLog = enableLog;
const enableLogByPrefix = (prefix, enabled) => {
    if (_logs[prefix]) {
        _logs[prefix].enabled = enabled;
    }
};
exports.enableLogByPrefix = enableLogByPrefix;
const getLog = () => {
    let logs = [];
    Object.keys(_logs).forEach(key => {
        logs = logs.concat(_logs[key].messages);
    });
    logs.sort((a, b) => a.timestamp - b.timestamp);
    return logs;
};
exports.getLog = getLog;
//# sourceMappingURL=debug.js.map